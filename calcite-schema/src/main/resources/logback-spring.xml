<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <contextName>calcite-pro</contextName>

    <springProperty scope="context" name="logPath" source="logback.logdir" defaultValue="logs"/>
<!--    <property name="logPath" value="logs"/>-->

    <!-- appender用来格式化日志输出节点 -->
    <!--输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n
            </Pattern>
        </encoder>
    </appender>

    <appender name="ACCESS_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/access.log</file>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${logPath}/access.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <layout>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>
        </layout>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>

        <file>${logPath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/error.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <maxHistory>90</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <layout>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>
        </layout>
    </appender>

    <!-- <loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 -->
    <!-- 开发环境 -->
    <springProfile name="dev">
        <logger name="com.whosly.trafficproxy" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ACCESS_LOG_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
    </springProfile>
    <!-- 生产环境 -->
    <springProfile name="prod">
        <logger name="com.whosly.trafficproxy" level="INFO" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ACCESS_LOG_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
    </springProfile>

    <logger name="reactor.netty.http.server.AccessLog" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ACCESS_LOG_FILE"/>
    </logger>


    <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 -->
    <root level="ERROR">
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <root level="DEBUG">
        <appender-ref ref="ACCESS_LOG_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ACCESS_LOG_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>
</configuration>